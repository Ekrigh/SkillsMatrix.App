@page "/discrepancymatrix"
@inject IUserService userService
@inject ISkillService skillService
@inject ICategoryService categoryService
@inject IUserSkillRatingService userSkillRatingService

@* Makes sortdirection icon visible *@
<style>
    .custom-grid .mud-table-cell .column-header .column-options .sort-direction-icon,
    .custom-grid .mud-table-cell .column-header .column-options .mud-menu .mud-icon-button-label {
        opacity: 1 !important;
    }
</style>

@if ((Users == null || !Users.Any()) || (Skills == null || !Skills.Any()))
{
    <p>Loading...</p>
}
else
{
    <div class="m-5">
        <h3 class="ml-1">Discrepancymatrix</h3>
        <MudCheckBox Class="ml-n2" @bind-Value="detailedViewBox" Label="Detailed view"></MudCheckBox>
        <div Class="d-flex">
            <MudChipSet Class="chipMenu" T="Category" SelectionMode="SelectionMode.MultiSelection" @bind-SelectedValues="_selectedCategories">
                <MudChip Style="min-width:80px" Selected="!_selectedCategories.Any()" T="string" OnClick="ShowAllSkills" Text="All Skills" Variant="Variant.Outlined" SelectedColor="Color.Primary" />
                @foreach (var category in Categories)
                {
                    <MudChip Value="@category" Text="@category.Name" Variant="Variant.Outlined" SelectedColor="Color.Primary" />
                }
            </MudChipSet>
            <MudSpacer />
            <MudIconButton Class="ml-3" Color="Color.Primary" Icon="@Icons.Material.Outlined.PersonSearch" OnClick="@(() => ShowFilterMenu(detailedViewBox ? matrixGrid: discrepancyMatrixGrid))" />
            <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Outlined.FilterAlt" OnClick="@(() => ShowColumnsMenu(detailedViewBox ? matrixGrid: discrepancyMatrixGrid))" />
            <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Outlined.FilterAltOff" OnClick="@(() => ClearGridFiltersAsync(detailedViewBox ? matrixGrid: discrepancyMatrixGrid))" />
            <MudInput Class="ml-1" Style="width:320px" Margin="Margin.Dense" @bind-Value="_searchString" Placeholder="Search user" Variant="Variant.Outlined" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"></MudInput>
        </div>

        @if (detailedViewBox)
        {
            <MudDataGrid Class="mt-5 rounded-lg custom-grid" Style="box-shadow: 0px 3px 6px 0px #20202029;" @ref="matrixGrid" T="User" Items="@Users" FilterMode="DataGridFilterMode.Simple"
                         Filterable="true" Hover="true" Bordered="true" Striped="true" HorizontalScrollbar="true" Hideable="true" ShowFilterIcons="false" ShowColumnOptions="false" QuickFilter="@_quickFilter">
                <Columns>
                    <PropertyColumn Property="User => User.Name" Title="User" StickyLeft="true" Hideable="false">
                        <FooterTemplate>
                            <MudText><strong>Total:</strong></MudText>
                        </FooterTemplate>
                    </PropertyColumn>

                    @foreach (var skill in Skills.Where(s => _selectedCategories.Contains(s.Category) || _selectedCategories.Count == 0))
                    {
                        var titleString = $"{skill.Name} Rating";
                        <PropertyColumn Property="user => userSkillRatingService.GetRating(user.Id, skill.Id).Result" Title="@titleString" CellStyleFunc="@(user => _ratingCellStyleFunc(user, skill))" Sortable="false" Groupable="true">
                            <HeaderTemplate>
                                <MudTooltip Text="@skill.Description" Arrow="true" Placement="Placement.Top">
                                    <MudText><b>@skill.Name</b></MudText>
                                </MudTooltip>
                            </HeaderTemplate>
                            <CellTemplate>
                                <MudTooltip Text="rating" Arrow="true" Placement="Placement.Top">
                                    <MudText><strong>@userSkillRatingService.GetRating(context.Item.Id, skill.Id).Result</strong></MudText>
                                </MudTooltip>
                            </CellTemplate>
                        </PropertyColumn>

                        titleString = $"{skill.Name} Desired Rating";
                        <PropertyColumn Property="user => userSkillRatingService.GetDesiredRating(user.Id, skill.Id).Result" Title="@titleString" CellStyleFunc="@(user => _ratingCellStyleFunc(user, skill))" Sortable="false">
                            <HeaderTemplate />
                            <CellTemplate>
                                @{
                                    var desiredRating = userSkillRatingService.GetDesiredRating(context.Item.Id, skill.Id).Result;
                                }
                                <MudTooltip Text="Desired rating" Arrow="true" Placement="Placement.Top">
                                    <MudText><strong>@desiredRating</strong></MudText>
                                </MudTooltip>
                            </CellTemplate>
                        </PropertyColumn>

                        titleString = $"{skill.Name} Discrepancy";
                        <PropertyColumn Property="user => userSkillRatingService.GetDiscrepancy(user, skill)" Title="@titleString" FooterStyle="text-align:center" CellStyleFunc="@(user => _ratingCellStyleFunc(user, skill))" AggregateDefinition="_discrepancyAggregation" Sortable="true" CellStyle="border-right: 2px solid black;">
                            <HeaderTemplate />
                            <CellTemplate>
                                <MudTooltip Text="Discrepancy" Arrow="true" Placement="Placement.Top">
                                    <MudText><strong>@userSkillRatingService.GetDiscrepancy(context.Item, skill)</strong></MudText>
                                </MudTooltip>
                            </CellTemplate>
                        </PropertyColumn>
                    }
                </Columns>
            </MudDataGrid>
        }
        else
        {
            <MudDataGrid Class="mt-5 rounded-lg custom-grid" Style="box-shadow: 0px 3px 6px 0px #20202029;" @ref="discrepancyMatrixGrid" T="User" Items="@Users" FilterMode="DataGridFilterMode.Simple"
                         Filterable="true" Hover="true" Bordered="true" Striped="true" HorizontalScrollbar="true" Hideable="true" ShowFilterIcons="false" ShowColumnOptions="false" QuickFilter="@_quickFilter">
                <Columns>
                    <PropertyColumn Property="User => User.Name" Title="User" StickyLeft="true" Hideable="false">
                        <HeaderTemplate>
                            <MudText><strong>User</strong></MudText>
                        </HeaderTemplate>
                        <FooterTemplate>
                            <MudText Class="sticky-footer"><strong>Total:</strong></MudText>
                        </FooterTemplate>
                    </PropertyColumn>

                    @foreach (var skill in Skills.Where(s => _selectedCategories.Contains(s.Category) || _selectedCategories.Count == 0))
                    {
                    <PropertyColumn Property="user => userSkillRatingService.GetDiscrepancy(user, skill)" Title="@skill.Name" FooterStyle="text-align:center" CellStyleFunc="@(user => _ratingCellStyleFunc(user, skill))"
                                        AggregateDefinition="_discrepancyAggregation" Sortable="true">
                            <HeaderTemplate>
                                <MudTooltip Text="@skill.Description" Arrow="true" Placement="Placement.Top">
                                    <MudText><strong>@skill.Name</strong></MudText>
                                </MudTooltip>
                            </HeaderTemplate>
                            <CellTemplate>
                                @{
                                    var rating = userSkillRatingService.GetRating(context.Item.Id, skill.Id).Result;
                                    var desiredRating = userSkillRatingService.GetDesiredRating(context.Item.Id, skill.Id).Result;
                                    var discrepancy = userSkillRatingService.GetDiscrepancy(context.Item, skill);
                                    string tooltip = $"Rating: {rating}, Desired: {desiredRating}";
                                }
                                <MudTooltip Text="@tooltip" Arrow="true" Placement="Placement.Top">
                                    <MudText><strong>@discrepancy</strong></MudText>
                                </MudTooltip>
                            </CellTemplate>
                        </PropertyColumn>
                    }
                </Columns>
            </MudDataGrid>
        }
    </div>
}

@code {
    private IEnumerable<User> Users { get; set; }
    private IEnumerable<Skill> Skills { get; set; }
    private IEnumerable<Category> Categories { get; set; }
    private IReadOnlyCollection<Category> _selectedCategories = new List<Category>();
    private IEnumerable<UserSkillRating> UserSkillRatings { get; set; } = new List<UserSkillRating>();
    private MudDataGrid<User> matrixGrid;
    private MudDataGrid<User> discrepancyMatrixGrid;
    private string _searchString;
    public bool detailedViewBox { get; set; } = false;
    private AggregateDefinition<User> _discrepancyAggregation = new AggregateDefinition<User>
        {

            Type = AggregateType.Sum,
            DisplayFormat = "{value}"
        };

    private Func<User, bool> _quickFilter => user =>
      {
          return string.IsNullOrWhiteSpace(_searchString) || user.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
      };

    protected override async Task OnInitializedAsync()
    {
        Users = await userService.GetAll();
        Skills = await skillService.GetAll();
        Categories = await categoryService.GetAll();
        UserSkillRatings = await userSkillRatingService.GetAll();
    }

    private Func<User, Skill, string> _ratingCellStyleFunc => (user, skill) =>
    {
        string style = "font-weight:bold;text-align:center";
        int? ratingDiff = userSkillRatingService.GetDiscrepancy(user, skill);

        switch (ratingDiff)
        {
            case -5:
                style += ";background-color:#E94B41CC";
                break;
            case -4:
                style += ";background-color:#F28724CC";
                break;
            case -3:
                style += ";background-color:#F2C024CC";
                break;
            case -2:
                style += ";background-color:#D1E329CC";
                break;
            case -1:
                style += ";background-color:#9CD751CC";
                break;
            default:
                style += ";background-color:#75C13CCC";
                break;
        }
        return style;
    };

    private async Task ClearGridFiltersAsync(MudDataGrid<User> datagrid)
    {
        await datagrid.ClearFiltersAsync();

        foreach (var column in datagrid.RenderedColumns)
        {
            await column.ShowAsync();
        }
    }

    private void ShowColumnsMenu(MudDataGrid<User> datagrid)
    {
        datagrid.ShowColumnsPanel();
    }

    private void ShowFilterMenu(MudDataGrid<User> datagrid)
    {
        datagrid.ToggleFiltersMenu();
    }

    private void ShowAllSkills()
    {
        _selectedCategories = new List<Category>();
    }
}

