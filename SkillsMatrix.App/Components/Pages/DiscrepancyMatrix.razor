@page "/discrepancymatrix"
@inject IUserService userService
@inject ISkillService skillService
@inject ICategoryService categoryService
@inject IUserSkillRatingService userSkillRatingService
<MudOverlay @bind-Visible="columnsMenuOpen" AutoClose="true" />
@* Makes sortdirection icon visible *@
<style>
    .custom-grid .mud-table-cell .column-header .column-options .sort-direction-icon,
    .custom-grid .mud-table-cell .column-header .column-options .mud-menu .mud-icon-button-label {
        opacity: 1 !important;
    }
</style>

@if (Users == null || Skills == null || Categories == null)
{
    <p>Loading...</p>
}
else
{
    <div class="m-5">
        <h3 class="ml-1">Discrepancymatrix</h3>
        <MudCheckBox Class="ml-n2" Color="Color.Info" UncheckedColor="Color.Default" @bind-Value="detailedViewBox" Label="Detailed view"></MudCheckBox>
        <div Class="d-flex">
            <MudChipSet Class="chipMenu" T="Category" SelectionMode="SelectionMode.MultiSelection" @bind-SelectedValues="_selectedCategories">
                <MudChip Style="min-width:80px" Selected="!_selectedCategories.Any()" T="string" OnClick="ShowAllSkills" Text="All Skills" Variant="Variant.Outlined" SelectedColor="Color.Info" />
                @foreach (var category in Categories.Where(category => category.ParentCategoryId != null))
                {
                    <MudChip Value="@category" Text="@category.Name" Variant="Variant.Outlined" SelectedColor="Color.Info" />
                }
            </MudChipSet>
            <MudSpacer />
           @*  <MudIconButton Class="ml-3" Color="Color.Secondary" Icon="@Icons.Material.Outlined.PersonSearch" OnClick="@(() => ShowFilterMenu(detailedViewBox ? detailedDiscrepancyMatrixGrid: discrepancyMatrixGrid))" /> *@
            <div style="display:inline-block">
                <MudIconButton Color="Color.Secondary" Icon="@columnFilterIcon" OnClick="@(() => ToggleColumnsMenu())" />
                <MudPopover Open="@columnsMenuOpen" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                    <ColumnsMenu IsOpen="@columnsMenuOpen" IsOpenChanged="ToggleColumnsMenu" Skills="@Skills" Categories="@Categories" SelectedCategories="@_selectedCategories.ToList()" FilteredSkills="FilteredSkills" />
                </MudPopover>
            </div>
            <MudInput Class="ml-1" Style="width:320px" Margin="Margin.Dense" @bind-Value="_searchString" Placeholder="Search user" Variant="Variant.Outlined" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"></MudInput>
        </div>

        @{
            var SkillsToRender = FilteredSkills.Count > 0 ? FilteredSkills : Skills;
        }
        @if (detailedViewBox)
        {
            <DetailedDiscrepancyMatrixView Users="@Users" Skills="@SkillsToRender" _selectedCategories="@_selectedCategories" _ratingCellStyleFunc="@_ratingCellStyleFunc" GetRating="@GetRating" GetDesiredRating="@GetDesiredRating" GetDiscrepancy="@GetDiscrepancy" _discrepancyAggregation="@_discrepancyAggregation" _quickFilter="@_quickFilter" OnGridReferenceSet="(grid) => detailedDiscrepancyMatrixGrid = grid" />
        }
        else
        {
            <DiscrepancyMatrixView Users="@Users" Skills="@SkillsToRender" _selectedCategories="@_selectedCategories" _ratingCellStyleFunc="@_ratingCellStyleFunc" GetRating="@GetRating" GetDesiredRating="@GetDesiredRating" GetDiscrepancy="@GetDiscrepancy" _discrepancyAggregation="@_discrepancyAggregation" _quickFilter="@_quickFilter" OnGridReferenceSet="(grid) => discrepancyMatrixGrid = grid" />
        }
    </div>
}

@code {
    private IEnumerable<User> Users { get; set; }
    private IEnumerable<Skill> Skills { get; set; }
    private List<Skill> FilteredSkills { get; set; } = new();
    private IEnumerable<Category> Categories { get; set; }
    private IReadOnlyCollection<Category> _selectedCategories = new List<Category>();
    private IEnumerable<UserSkillRating> UserSkillRatings { get; set; } = new List<UserSkillRating>();
    private Dictionary<(int, int), int> _ratingCache;
    private Dictionary<(int, int), int> _desiredRatingCache;
    private Dictionary<(int, int), int> _discrepancyCache;
    private MudDataGrid<User> detailedDiscrepancyMatrixGrid;
    private MudDataGrid<User> discrepancyMatrixGrid;
    private string _searchString;
    public bool detailedViewBox { get; set; } = false;
    private string columnFilterIcon = @Icons.Material.Outlined.FilterAlt;
    bool columnsMenuOpen = false;
    private AggregateDefinition<User> _discrepancyAggregation = new AggregateDefinition<User>
        {
            Type = AggregateType.Sum,
            DisplayFormat = "{value}"
        };

    private Func<User, bool> _quickFilter => user =>
      {
          return string.IsNullOrWhiteSpace(_searchString) || user.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
      };

    protected override async Task OnInitializedAsync()
    {
        Users = await userService.GetAll();
        Skills = await skillService.GetAll();
        Categories = await categoryService.GetAll();
        UserSkillRatings = await userSkillRatingService.GetAll();

        _ratingCache = UserSkillRatings.ToDictionary(
       usr => (usr.UserId, usr.SkillId),
       usr => usr.Rating 
       );

        _desiredRatingCache = UserSkillRatings.ToDictionary(
       usr => (usr.UserId, usr.SkillId),
       usr => usr.DesiredRating
       );

        _discrepancyCache = UserSkillRatings.ToDictionary(
       usr => (usr.UserId, usr.SkillId),
       usr =>  usr.Rating - usr.DesiredRating
       );
    }

    private Func<User, Skill, string> _ratingCellStyleFunc => (user, skill) =>
    {

        int? discrepancy = GetDiscrepancy(user.Id, skill.Id);
        string style = "font-weight:bold;text-align:center";

        switch (discrepancy)
        {
            case -5:
                style += ";background-color:#E94B41CC";
                break;
            case -4:
                style += ";background-color:#F28724CC";
                break;
            case -3:
                style += ";background-color:#F2C024CC";
                break;
            case -2:
                style += ";background-color:#D1E329CC";
                break;
            case -1:
                style += ";background-color:#9CD751CC";
                break;
            default:
                style += ";background-color:#75C13CCC";
                break;
        }
        return style;
    };

    private void ToggleColumnsMenu()
    {
        columnsMenuOpen = !columnsMenuOpen;
        columnFilterIcon = FilteredSkills.Count() == 0 ? @Icons.Material.Outlined.FilterAlt : @Icons.Material.Filled.FilterAlt;
    }

    // private void ShowFilterMenu(MudDataGrid<User> datagrid)
    // {
    //     datagrid.ToggleFiltersMenu();
    // }

    private void ShowAllSkills()
    {
        _selectedCategories = new List<Category>();
    }

    private int GetDiscrepancy(int userId, int skillId)
    {
        return _discrepancyCache.TryGetValue((userId, skillId), out var discrepancy) ? discrepancy : 0;
    }

    private int GetDesiredRating(int userId, int skillId)
    {
        return _desiredRatingCache.TryGetValue((userId, skillId), out var desiredRating) ? desiredRating : 0;
    }

    private int GetRating(int userId, int skillId)
    {
        return _ratingCache.TryGetValue((userId, skillId), out var rating) ? rating : 0;
    }
}

