@page "/discrepancymatrix"
@inject IUserService userService
@inject ISkillService skillService
@inject ICategoryService categoryService
@inject IUserSkillRatingService userSkillRatingService

@* Makes sortdirection icon visible *@
<style>
    .custom-grid .mud-table-cell .column-header .column-options .sort-direction-icon,
    .custom-grid .mud-table-cell .column-header .column-options .mud-menu .mud-icon-button-label {
        opacity: 1 !important;
    }
</style>

@if ((Users == null || !Users.Any()) || (Skills == null || !Skills.Any()))
{
    <p>Loading...</p>
}
else
{
    <div class="m-5">
        <h3 class="ml-1">Discrepancymatrix</h3>
        <MudCheckBox Class="ml-n2" @bind-Value="detailedViewBox" Label="Detailed view"></MudCheckBox>
        <div Class="d-flex">
            <MudChipSet Class="chipMenu" T="Category" SelectionMode="SelectionMode.MultiSelection" @bind-SelectedValues="_selectedCategories">
                <MudChip Style="min-width:80px" Selected="!_selectedCategories.Any()" T="string" OnClick="ShowAllSkills" Text="All Skills" Variant="Variant.Outlined" SelectedColor="Color.Primary" />
                @foreach (var category in Categories)
                {
                    <MudChip Value="@category" Text="@category.Name" Variant="Variant.Outlined" SelectedColor="Color.Primary" />
                }
            </MudChipSet>
            <MudSpacer />
            <MudIconButton Class="ml-3" Color="Color.Primary" Icon="@Icons.Material.Outlined.PersonSearch" OnClick="@(() => ShowFilterMenu(detailedViewBox ? detailedDiscrepancyMatrixGrid: discrepancyMatrixGrid))" />
            <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Outlined.FilterAlt" OnClick="@(() => ShowColumnsMenu(detailedViewBox ? detailedDiscrepancyMatrixGrid: discrepancyMatrixGrid))" />
            <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Outlined.FilterAltOff" OnClick="@(() => ClearGridFiltersAsync(detailedViewBox ? detailedDiscrepancyMatrixGrid: discrepancyMatrixGrid))" />
            <MudInput Class="ml-1" Style="width:320px" Margin="Margin.Dense" @bind-Value="_searchString" Placeholder="Search user" Variant="Variant.Outlined" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"></MudInput>
        </div>

        @if (detailedViewBox)
        {
            <DetailedDiscrepancyMatrixView Users="@Users" Skills="@Skills" _selectedCategories="@_selectedCategories" _ratingCellStyleFunc="@_ratingCellStyleFunc" _discrepancyAggregation="@_discrepancyAggregation" _quickFilter="@_quickFilter" OnGridReferenceSet="(grid) => detailedDiscrepancyMatrixGrid = grid" />
        }
        else
        {
           <DiscrepancyMatrixView Users="@Users" Skills="@Skills" _selectedCategories="@_selectedCategories" _ratingCellStyleFunc="@_ratingCellStyleFunc" _discrepancyAggregation="@_discrepancyAggregation" _quickFilter="@_quickFilter" OnGridReferenceSet="(grid) => discrepancyMatrixGrid = grid" />
        }
    </div>
}

@code {
    private IEnumerable<User> Users { get; set; }
    private IEnumerable<Skill> Skills { get; set; }
    private IEnumerable<Category> Categories { get; set; }
    private IReadOnlyCollection<Category> _selectedCategories = new List<Category>();
    private IEnumerable<UserSkillRating> UserSkillRatings { get; set; } = new List<UserSkillRating>();
    private MudDataGrid<User> detailedDiscrepancyMatrixGrid;
    private MudDataGrid<User> discrepancyMatrixGrid;
    private string _searchString;
    public bool detailedViewBox { get; set; } = false;
    private AggregateDefinition<User> _discrepancyAggregation = new AggregateDefinition<User>
        {
            Type = AggregateType.Sum,
            DisplayFormat = "{value}"
        };

    private Func<User, bool> _quickFilter => user =>
      {
          return string.IsNullOrWhiteSpace(_searchString) || user.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
      };

    protected override async Task OnInitializedAsync()
    {
        Users = await userService.GetAll();
        Skills = await skillService.GetAll();
        Categories = await categoryService.GetAll();
        UserSkillRatings = await userSkillRatingService.GetAll();
    }

    private Func<User, Skill, string> _ratingCellStyleFunc => (user, skill) =>
    {
        string style = "font-weight:bold;text-align:center";
        int? ratingDiff = userSkillRatingService.GetDiscrepancy(user, skill);

        switch (ratingDiff)
        {
            case -5:
                style += ";background-color:#E94B41CC";
                break;
            case -4:
                style += ";background-color:#F28724CC";
                break;
            case -3:
                style += ";background-color:#F2C024CC";
                break;
            case -2:
                style += ";background-color:#D1E329CC";
                break;
            case -1:
                style += ";background-color:#9CD751CC";
                break;
            default:
                style += ";background-color:#75C13CCC";
                break;
        }
        return style;
    };

    private async Task ClearGridFiltersAsync(MudDataGrid<User> datagrid)
    {
        await datagrid.ClearFiltersAsync();

        foreach (var column in datagrid.RenderedColumns)
        {
            await column.ShowAsync();
        }
    }

    private void ShowColumnsMenu(MudDataGrid<User> datagrid)
    {
        datagrid.ShowColumnsPanel();
    }

    private void ShowFilterMenu(MudDataGrid<User> datagrid)
    {
        datagrid.ToggleFiltersMenu();
    }

    private void ShowAllSkills()
    {
        _selectedCategories = new List<Category>();
    }
}

