@page "/"
@inject IUserService userService
@inject ISkillService skillService
@inject ICategoryService categoryService
@inject IUserSkillRatingService userSkillRatingService

@if ((Users == null || !Users.Any()) || (Skills == null || !Skills.Any()))
{
    <p>Loading...</p>
}
else
{
    <div class="m-5">
        <h3 class="ml-1">Skillsmatrix</h3>

        <div Class="d-flex">

            <MudChipSet Class="chipMenu" T="Category" SelectionMode="SelectionMode.MultiSelection" @bind-SelectedValues="_selectedCategories">
                <MudChip Style="min-width:80px" Selected="!_selectedCategories.Any()" T="string" OnClick="ShowAllSkills" Text="All Skills" Variant="Variant.Outlined" SelectedColor="Color.Primary" />
                @foreach (var category in Categories)
                {
                    <MudChip Value="@category" Text="@category.Name" Variant="Variant.Outlined" SelectedColor="Color.Primary" />
                }
            </MudChipSet>
            <MudSpacer />
            <MudIconButton Class="ml-3" Color="Color.Primary" Icon="@Icons.Material.Outlined.PersonSearch" OnClick="ShowFilterMenu" />
            <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Outlined.FilterAlt" OnClick="ShowColumnsMenu" />
            <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Outlined.FilterAltOff" OnClick="ClearFilters" />
            <MudInput Class="ml-1" Style="width:320px" Margin="Margin.Dense" @bind-Value="_searchString" Placeholder="Search user" Variant="Variant.Outlined" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"></MudInput>
        </div>

        <MudDataGrid Class="mt-5 rounded-lg" FilterMode="DataGridFilterMode.Simple" Style="box-shadow: 0px 3px 6px 0px #20202029;" @ref="matrixGrid" T="User" Items="@Users"
                     Filterable="true" Hover="true" Bordered="true" Striped="true" HorizontalScrollbar="true" Hideable="true" ShowFilterIcons="false" ShowColumnOptions="false" QuickFilter="@_quickFilter">
            <Columns>
                <PropertyColumn Property="User => User.Name" Title="User" StickyLeft="true" Hideable="false" Filterable="false">
                    <HeaderTemplate>
                        <MudText><strong>User</strong></MudText>
                    </HeaderTemplate>
                </PropertyColumn>

                @foreach (var skill in Skills.Where(s => _selectedCategories.Contains(s.Category) || _selectedCategories.Count == 0))
                {
                    <PropertyColumn Property="user => GetUserSkillRating(user, skill)" Title="@skill.Name" FooterStyle="text-align:center" CellStyleFunc="@(user => _ratingCellStyleFunc(user, skill))" AggregateDefinition="_ratingAggregation">
                        <HeaderTemplate>
                            <MudTooltip Text="@skill.Description" Arrow="true" Placement="Placement.Top">
                                <MudText><b>@skill.Name</b></MudText>
                            </MudTooltip>
                        </HeaderTemplate>
                    </PropertyColumn>
                }
            </Columns>
        </MudDataGrid>
    </div>
}

@code {
    private IEnumerable<User> Users { get; set; }
    private IEnumerable<Skill> Skills { get; set; }
    private IEnumerable<Category> Categories { get; set; }
    private IEnumerable<UserSkillRating> UserSkillRatings { get; set; } = new List<UserSkillRating>();
    private MudDataGrid<User> matrixGrid;
    private string _searchString;
    private IReadOnlyCollection<Category> _selectedCategories = new List<Category>();
    private AggregateDefinition<User> _ratingAggregation = new AggregateDefinition<User>
        {
            Type = AggregateType.Sum,
            DisplayFormat = "Total: {value}"
        };

    private Func<User, bool> _quickFilter => user =>
      {
          if (string.IsNullOrWhiteSpace(_searchString)) return true;
          if (user.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) return true;
          return false;
      };

    protected override async Task OnInitializedAsync()
    {
        Users = await userService.GetAll();
        Skills = await skillService.GetAll();
        Categories = await categoryService.GetAll();
        UserSkillRatings = await userSkillRatingService.GetAll();
    }

    private int GetUserSkillRating(User user, Skill skill)
    {
        var userSkillRating = UserSkillRatings.Where(usr => usr.UserId == user.Id)
        .FirstOrDefault(usr => usr.SkillId == skill.Id);
        return userSkillRating?.Rating ?? 0;
    }

    private Func<User, Skill, string> _ratingCellStyleFunc => (user, skill) =>
    {
        string style = "font-weight:bold; text-align:center";
        int? rating = GetUserSkillRating(user, skill);

        switch (rating)
        {
            case 1:
                style += ";background-color:#E94B41CC";
                break;
            case 2:
                style += ";background-color:#F28724CC";
                break;
            case 3:
                style += ";background-color:#F2C024CC";
                break;
            case 4:
                style += ";background-color:#D1E329CC";
                break;
            case 5:
                style += ";background-color:#9CD751CC";
                break;
            case 6:
                style += ";background-color:#75C13CCC";
                break;
            default:
                style += ";background-color:#FCFCFC";
                break;
        }
        return style;
    };

    private async void ClearFilters()
    {
        matrixGrid.ClearFiltersAsync();

        foreach (var column in matrixGrid.RenderedColumns)
        {
            await column.ShowAsync();
        }
    }

    private void ShowColumnsMenu()
    {
        matrixGrid.ShowColumnsPanel();
    }

    private void ShowFilterMenu()
    {
        matrixGrid.ToggleFiltersMenu();
    }

    private void ShowAllSkills()
    {
        _selectedCategories = new List<Category>();
    }

}


