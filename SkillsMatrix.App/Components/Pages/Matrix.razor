@page "/"
@inject IUserService userService
@inject ISkillService skillService
@inject ICategoryService categoryService
@inject IUserSkillRatingService userSkillRatingService


<MudOverlay @bind-Visible="columnsMenuOpen" AutoClose="true" />
<MudOverlay @bind-Visible="peopleFinderOpen" AutoClose="true" />
@if (Users == null ||  Skills == null)
{
    <p>Loading...</p>
}
else
{
    <div class="m-5">
        <h4 class="ml-1">Skillsmatrix</h4>
        <div Class="d-flex">
            <MudChipSet Class="chipMenu" T="Category" SelectionMode="SelectionMode.MultiSelection" @bind-SelectedValues="_selectedCategories">
                <MudChip Style="min-width:80px" Selected="!_selectedCategories.Any()" T="string" OnClick="ShowAllSkills" Text="All Skills" Variant="Variant.Outlined" SelectedColor="Color.Info" />
                @foreach (var category in Categories.Where(category => category.ParentCategoryId != null))
                {
                    <MudChip Value="@category" Text="@category.Name" Variant="Variant.Outlined" SelectedColor="Color.Info" />
                }
            </MudChipSet>
            <MudSpacer />
            <div style="display:inline-block">
                <MudIconButton Class="ml-3" Color="Color.Secondary" Icon="@peopleFinderIcon" OnClick="TogglePeopleFinder" />
            <MudPopover Open="@peopleFinderOpen" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                    <PeopleFinder IsOpen="@peopleFinderOpen" IsOpenChanged="TogglePeopleFinder" Skills="@Skills" Users="@Users" FilteredUsers="@FilteredUsers" PeopleFinderFilters="@PeopleFinderFilters" />
            </MudPopover>
            </div>
            <div style="display:inline-block">
                <MudIconButton Color="Color.Secondary" Icon="@columnFilterIcon" OnClick="ToggleColumnsMenu" />
                <MudPopover Open="@columnsMenuOpen" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                    <ColumnsMenu IsOpen="@columnsMenuOpen" IsOpenChanged="ToggleColumnsMenu" Skills="@Skills" Categories="@Categories" SelectedCategories="@_selectedCategories.ToList()" FilteredSkills="FilteredSkills" />
                </MudPopover>
            </div>
            <MudInput AdornmentColor="Color.Secondary" Class="ml-1" Style="width:320px" Margin="Margin.Dense" @bind-Value="_searchString" Placeholder="Search user" Variant="Variant.Outlined" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"></MudInput>
        </div>

        <MudDataGrid @ref="matrixGrid" Virtualize="true" OverscanCount="0" FixedHeader="true" FixedFooter="true" Height="800px" Class="mt-5 rounded-lg" Style="box-shadow: 0px 3px 6px 0px #20202029;" T="User" Items="@FilteredUsers" QuickFilter="_quickFilter"
                     Bordered="true" Striped="true" ShowFilterIcons="false" ShowColumnOptions="false" HorizontalScrollbar="true">
            <Columns>
                <PropertyColumn CellClass="sticky-column" HeaderClass="sticky-column" Property="User => User.Name" Title="User">
                    <HeaderTemplate>
                        <MudText><strong>User</strong></MudText>
                    </HeaderTemplate>
                </PropertyColumn>
                @{
                    var SkillsToRender = FilteredSkills.Count > 0 ? FilteredSkills : Skills;
                }
                @foreach (var skill in SkillsToRender.Where(s => _selectedCategories.Contains(s.Category) || _selectedCategories.Count == 0))
                {

                    <PropertyColumn Property="user => userSkillRatingService.GetRating(user.Id, skill.Id)" Class="mw-100" Title="@skill.Name" FooterStyle="text-align:center" CellStyleFunc="@(user => _ratingCellStyleFunc(user, skill))" AggregateDefinition="_ratingAggregation">
                        <HeaderTemplate>
                            <MudTooltip Text="@skill.Description" Arrow="true" Placement="Placement.Top">
                                <MudText><strong>@skill.Name</strong></MudText>
                            </MudTooltip>
                        </HeaderTemplate>
                    </PropertyColumn>
                }
            </Columns>
        </MudDataGrid>
    </div>
}

@code {
    private IEnumerable<User> Users { get; set; }
    private List<User> FilteredUsers { get; set; }
    private List<PeopleFinderFilter> PeopleFinderFilters { get; set; } = new();
    private IEnumerable<Skill> Skills { get; set; }
    private List<Skill> FilteredSkills { get; set; } = new();
    private IEnumerable<Category> Categories { get; set; }
    private IEnumerable<UserSkillRating> UserSkillRatings { get; set; } = new List<UserSkillRating>();
    // private Dictionary<(int, int), int> _ratingCache;
    private MudDataGrid<User> matrixGrid;
    private string _searchString;
    private IReadOnlyCollection<Category> _selectedCategories = new List<Category>();
    private string columnFilterIcon = @Icons.Material.Outlined.FilterAlt;
    private string peopleFinderIcon = @Icons.Material.Outlined.PersonSearch;
    bool columnsMenuOpen = false;
    bool peopleFinderOpen = false;

    private AggregateDefinition<User> _ratingAggregation = new AggregateDefinition<User>
        {
            Type = AggregateType.Sum,
            DisplayFormat = "Total: {value}"
        };

    private Func<User, bool> _quickFilter => user =>
      {
          return string.IsNullOrWhiteSpace(_searchString) || user.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
      };

    protected override async Task OnInitializedAsync()
    {
        Users = await userService.GetAll();
        Skills = await skillService.GetAll();
        Categories = await categoryService.GetAll();
        UserSkillRatings = await userSkillRatingService.GetAll();
        FilteredUsers = Users.ToList();

        // _ratingCache = UserSkillRatings.ToDictionary(
        // usr => (usr.UserId, usr.SkillId),
        // usr => usr.Rating
        //);
    }

    private Func<User, Skill, string> _ratingCellStyleFunc => (user, skill) =>
    {
        string style = "font-weight:bold; text-align:center";
        // int? rating = _ratingCache.TryGetValue((user.Id, skill.Id), out var r) ? r : null;
        int? rating = userSkillRatingService.GetRating(user.Id, skill.Id);

        switch (rating)
        {
            case 1:
                style += ";background-color:#E94B41CC";
                break;
            case 2:
                style += ";background-color:#F28724CC";
                break;
            case 3:
                style += ";background-color:#F2C024CC";
                break;
            case 4:
                style += ";background-color:#D1E329CC";
                break;
            case 5:
                style += ";background-color:#9CD751CC";
                break;
            case 6:
                style += ";background-color:#75C13CCC";
                break;
            default:
                style += ";background-color:#FCFCFC";
                break;
        }
        return style;
    };

    private void ToggleColumnsMenu()
    {
        columnsMenuOpen = !columnsMenuOpen;
        columnFilterIcon = FilteredSkills.Count() == 0 ? @Icons.Material.Outlined.FilterAlt : @Icons.Material.Filled.FilterAlt;
    }

    private void TogglePeopleFinder()
    {
        peopleFinderOpen = !peopleFinderOpen;
        peopleFinderIcon = FilteredUsers.Count() == Users.Count() ? @Icons.Material.Outlined.PersonSearch : @Icons.Material.Filled.PersonSearch;
    }

    private void ShowFilterMenu()
    {
        matrixGrid.ToggleFiltersMenu();
    }

    private void ShowAllSkills()
    {
        _selectedCategories = new List<Category>();
    }

}


