@page "/manageusers"
@inject IUserService userService
@inject ISkillService skillService
@inject ISnackbar Snackbar

<PageTitle>Manage User</PageTitle>

<h3>Manage User</h3>

<div class="col-md-4">
    <EditForm Model="@User" FormName="AddUser" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
            <label for="Name" class="form-label">Name:</label>
            <InputText id="Name" @bind-Value="User.Name" class="form-control" />
            <ValidationMessage For="() => User.Name" />
            <label for="Email" class="form-label">E-mail:</label>
            <InputText id="Email" @bind-Value="User.Email" class="form-control" />
            <ValidationMessage For="() => User.Email" />
        
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Add User</MudButton>
        <MudButton @onclick="DeleteUser">Delete</MudButton>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <MudText Color="Color.Error">@ErrorMessage</MudText>
        }
    </EditForm>
</div>

@code
{
    private User User { get; set; } = new();
    private IEnumerable<User> Users { get; set; }
    private IEnumerable<Skill> Skills { get; set; }
    private string ErrorMessage;

    private async Task HandleValidSubmit()
    {
        if (Users.Any(user => user.Email.Equals(User.Email, StringComparison.InvariantCultureIgnoreCase)))
        {
            ErrorMessage = "This mailadress is already in use";
            return;
        }
        ErrorMessage = string.Empty;

        await userService.Add(User);
        Snackbar.Add("Successfully added user", Severity.Success, config =>
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        });
        Users = await userService.GetAll();
        User = new();
    }

    private async Task DeleteUser()
    {
        var userToDelete = Users.FirstOrDefault(user => user.Email.Equals(User.Email, StringComparison.InvariantCultureIgnoreCase));
        if (userToDelete == null)
        {
            ErrorMessage = "The user does not exist";
            return;
        }
        ErrorMessage = string.Empty;
        await userService.Delete(userToDelete);
        Snackbar.Add("Successfully removed user", Severity.Info, config =>
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        });
        Users = await userService.GetAll();
        User = new();
    }

    protected override async Task OnInitializedAsync()
    {
        Users = await userService.GetAll();
        Skills = await skillService.GetAll();
    }
}