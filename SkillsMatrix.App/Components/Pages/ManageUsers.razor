@page "/manageusers"
@rendermode InteractiveServer
@using SkillsMatrix.Infrastructure.Models
@using SkillsMatrix.Infrastructure.Services.UserService
@using SkillsMatrix.Infrastructure.Services.SkillService
@inject IUserService userService;
@inject ISkillService skillService

<PageTitle>Manage User</PageTitle>

<h3>Manage User</h3>

    <div class="col-md-4">
        <EditForm Model="@User" FormName="AddUser" OnValidSubmit="HandleValidSubmit">
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label>
                <InputText id="name" @bind-Value="User.Name" class="form-control" />
                <label for="email" class="form-label">E-mail:</label>
                <InputText id="email" @bind-Value="User.Email" class="form-control" />
            </div>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Add User</MudButton>
        <MudButton @onclick="DeleteUser">Delete</MudButton>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <MudText Color="Color.Error">@ErrorMessage</MudText>
        }
        </EditForm>
    </div>


@code
{
    private User User { get; set; } = new ();
    private IEnumerable<User> Users { get; set; }
    private IEnumerable<Skill> Skills { get; set; }
    private string ErrorMessage;

    private async Task HandleValidSubmit()
    {
        if (Users.Any(user => user.Email.Equals(User.Email, StringComparison.InvariantCultureIgnoreCase)))
        {
            ErrorMessage = "This mailadress is already in use";
            return;
        }
        ErrorMessage = string.Empty;
        if (User is null) return;
        InitialiseUserSkillRatings(User);
        await userService.Add(User);
    }

    private async Task DeleteUser()
    {
        var userToDelete = Users.FirstOrDefault(user => user.Email.Equals(User.Email, StringComparison.InvariantCultureIgnoreCase));
        if (userToDelete == null)
        {
            ErrorMessage = "The category does not exist";
            return;
        }
        ErrorMessage = string.Empty;
        await userService.Delete(userToDelete);
        Users = await userService.GetAll();
    }

    protected override async Task OnInitializedAsync()
    {
        Users = await userService.GetAll();
        Skills = await skillService.GetAll();

    }

    private async Task InitialiseUserSkillRatings(User user)
    {
        foreach (var skill in Skills)
        {
            user.UserSkillRatings.Add(new UserSkillRating
            {
                UserId = user.Id,
                SkillId = skill.Id,
                Rating = 0
            });
        }
    }     
        

        

}