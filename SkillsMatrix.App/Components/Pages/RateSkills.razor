@page "/rateskills"
@rendermode InteractiveServer
@using SkillsMatrix.Infrastructure.Models
@using SkillsMatrix.Infrastructure.Services.UserSkillRatingService
@using SkillsMatrix.Infrastructure.Services.CategoryService
@using SkillsMatrix.Infrastructure.Services.UserService
@using SkillsMatrix.Infrastructure.Services.SkillService

@inject IUserSkillRatingService userSkillRatingService
@inject ICategoryService categoryService
@inject IUserService userService
@inject ISkillService skillService

<h3>rateSkills</h3>

<div class="row">
    <div class="col-md-4">
            <MudAutocomplete T="Category" Label="Choose a category" MaxItems="null" @bind-Value="SelectedCategory" ToStringFunc="@(category => category==null?null: $"{category.Name}")" SearchFuncWithCancel="@SearchCategory">
                <NoItemsTemplate>
                    <MudText Align="Align.Center" Class="px-4 py-1">No matching categories found</MudText>
                </NoItemsTemplate>
            </MudAutocomplete>
    </div>
</div>

@if (SelectedCategory == null)
{
    <p>Please select a category.</p>
}
else
{
    <EditForm Model="UserSkillRatings">
        @foreach (var skill in SkillsByCategory)
        {
            var userSkillRating = GetUserSkillRatingForSkill(skill);
            <SkillRatingComponent UserSkillRating="userSkillRating" OnUserSkillRatingChanged="UpdateUserSkillRating" />
         }
        <MudButton ButtonType="ButtonType.Submit" @onclick="SaveAllRatings" Variant="Variant.Filled" Color="Color.Primary">Save All Ratings</MudButton>
    </EditForm> 
} 

@code 
{
    private User currentUser;
    private Category _selectedCategory;
    [Parameter]
    public Category SelectedCategory {
        get => _selectedCategory;
        set
        {
            if (_selectedCategory == value) return;
            _selectedCategory = value;
            SkillsByCategory = Skills.Where(skill => skill.Category == _selectedCategory).ToList();
        }
    }

    private IEnumerable<Category> Categories { get; set; }
    private IEnumerable<Skill> Skills { get; set; }
    private List<Skill> SkillsByCategory { get; set; } = new();
    private List<UserSkillRating> UserSkillRatings { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        currentUser = await userService.Get(1);
        Categories = await categoryService.GetAll();
        Skills = await skillService.GetAll();
        UserSkillRatings = await userSkillRatingService.GetAllByUserId(currentUser.Id);
    }

    private UserSkillRating GetUserSkillRatingForSkill(Skill skill)
    {
        var userSkillRating = UserSkillRatings.FirstOrDefault(usr => usr.SkillId == skill.Id);
        if (userSkillRating == null)
        {
            userSkillRating = new UserSkillRating
                {
                    UserId = currentUser.Id,
                    SkillId = skill.Id,
                    Skill = skill,
                    User = currentUser,
                };
            UserSkillRatings.Add(userSkillRating);
        }
        return userSkillRating;
    }

    private async Task SaveAllRatings()
    {
        await userSkillRatingService.SaveAll(UserSkillRatings);
        Console.WriteLine("All ratings have been saved.");
    }

    private void UpdateUserSkillRating(UserSkillRating updatedRating)
    {
        var existingRating = UserSkillRatings.FirstOrDefault(r => r.SkillId == updatedRating.SkillId);
        if (existingRating != null)
        {
            existingRating.Rating = updatedRating.Rating;
            existingRating.DesiredRating = updatedRating.DesiredRating;
        }
        else
        {
            UserSkillRatings.Add(updatedRating);
        }
    }

    private async Task<IEnumerable<Category>> SearchCategory(string value, CancellationToken token)
    {
        await Task.CompletedTask;
        return string.IsNullOrEmpty(value) ? Categories :
        Categories.Where(category => category.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}
