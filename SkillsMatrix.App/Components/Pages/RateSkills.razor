@page "/rateskills"
@inject IUserSkillRatingService userSkillRatingService
@inject ICategoryService categoryService
@inject IUserService userService
@inject ISkillService skillService
@inject ISnackbar Snackbar

@if (currentUser == null || (Skills == null || !Skills.Any()) || (Categories == null || !Categories.Any()) || (UserSkillRatings == null || !UserSkillRatings.Any()))
{
    <p>Loading...</p>
}
else
{

        <div class="p-5 m-5 rounded-lg" Style="box-shadow: 0px 3px 6px 0px #20202029; min-width:550px">
        @*
    <h3>Rate Skills</h3>
        <MudAutocomplete T="Category" Label="Choose a category" MaxItems="null" @bind-Value="SelectedCategory" ToStringFunc="@(category => category==null?null: $"{category.Name}")" SearchFunc="@SearchCategory">
            <NoItemsTemplate>
                <MudText Align="Align.Center" Class="px-4 py-1">No matching categories found</MudText>
            </NoItemsTemplate>
        </MudAutocomplete>

        @if (SelectedCategory != null)
        {
            <EditForm Model="UserSkillRatings" OnValidSubmit="HandleValidSubmit" class="mt-5">
                @foreach (var skill in SkillsByCategory)
                {
                    var userSkillRating = GetTempUserSkillRatingForSkill(skill);
                    <SkillRatingComponent UserSkillRating="userSkillRating" />
                }
                <MudButton Disabled="@_processing" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Class="mt-5" Color="Color.Primary">Save All Ratings</MudButton>
            </EditForm>
        } *@

    @if (SelectedCategory != null)
    {
        <EditForm Model="UserSkillRatings" OnValidSubmit="HandleValidSubmit" class="mt-5">
            <MudTabs @bind-ActivePanelIndex="SelectedCategoryIndex" Elevation="2" Rounded="true" ApplyEffectsToContainer="true">
                @foreach (var category in Categories)
                {

                    <MudTabPanel ID="@category.Id" Text="@category.Name">
                    </MudTabPanel>
                }
            </MudTabs>

            @foreach (var skill in SkillsByCategory)
            {
                var userSkillRating = GetTempUserSkillRatingForSkill(skill);
                <SkillRatingComponent UserSkillRating="userSkillRating" />
            }

            <MudButton Disabled="@_processing" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Class="mt-5" Color="Color.Primary">Save All Ratings</MudButton>

        </EditForm>
    }
        </div>

    @code
    {
    private int _selectedCategoryIndex;
    private int SelectedCategoryIndex
    {
        get => _selectedCategoryIndex;
        set
        {
            if (_selectedCategoryIndex == value) return;
            _selectedCategoryIndex = value;
            SelectedCategory = Categories.ElementAt(_selectedCategoryIndex);
        }
    }
    private User currentUser;
    private IEnumerable<Category> Categories { get; set; }
    private IEnumerable<Skill> Skills { get; set; }
    private List<Skill> SkillsByCategory { get; set; }
    private List<UserSkillRating> UserSkillRatings { get; set; } = new();
    private List<UserSkillRating> TempUserRatings { get; set; } = new();
    //private List<UserSkillRating> TempUserRatingsForSelectedCategory { get; set; } = new();
    private bool _processing = false;
    private Category _selectedCategory;
    [Parameter]
    public Category SelectedCategory
    {
        get => _selectedCategory;
        set
        {
            if (_selectedCategory == value) return;
            _selectedCategory = value;
            SkillsByCategory = Skills.Where(skill => skill.CategoryId == _selectedCategory.Id).ToList();
            TempUserRatings = CreateDeepCopy(UserSkillRatings.Where(usr => SkillsByCategory.Any(skill => skill.Id == usr.SkillId)).ToList());
        }
    }

    protected override async Task OnInitializedAsync()
    {
        currentUser = await userService.GetById(12);
        Categories = await categoryService.GetAll();
        Skills = await skillService.GetAll();
        UserSkillRatings = await userSkillRatingService.GetAllByUserId(currentUser.Id);
        SelectedCategory = Categories.First();
    }

    private UserSkillRating GetTempUserSkillRatingForSkill(Skill skill)
    {

        var userSkillRating = TempUserRatings?.FirstOrDefault(usr => usr.SkillId == skill.Id);
        if (userSkillRating == null)
        {
            userSkillRating = new UserSkillRating
                {
                    UserId = currentUser.Id,
                    SkillId = skill.Id,
                    Skill = skill,
                    User = currentUser,
                };
            TempUserRatings.Add(userSkillRating);
        }
        return userSkillRating;
    }

    private async Task HandleValidSubmit()
    {
        _processing = true;
        foreach (var tempUserSkillRating in TempUserRatings)
        {
            tempUserSkillRating.LastUpdated = DateTime.Now;
            var originalRating = UserSkillRatings.FirstOrDefault(usr => usr.SkillId == tempUserSkillRating.SkillId);
            if (originalRating != null)
            {
                originalRating.Rating = tempUserSkillRating.Rating;
                originalRating.DesiredRating = tempUserSkillRating.DesiredRating;
                originalRating.LastUpdated = DateTime.Now;
            }
            else
            {
                UserSkillRatings.Add(tempUserSkillRating);
            }
        }

        currentUser.LastSurvey = DateTime.Now;

        await userSkillRatingService.AddAll(UserSkillRatings);
        Snackbar.Add("Ratings saved", Severity.Success, config =>
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        });
        _processing = false;
    }

    private async Task<IEnumerable<Category>> SearchCategory(string value, CancellationToken token)
    {
        await Task.CompletedTask;
        return string.IsNullOrEmpty(value) ? Categories :
        Categories.Where(category => category.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private List<UserSkillRating> CreateDeepCopy(List<UserSkillRating> originalList)
    {
        return originalList.Select(item => new UserSkillRating
            {
                UserId = item.UserId,
                SkillId = item.SkillId,
                Skill = item.Skill,
                User = item.User,
                Rating = item.Rating,
                DesiredRating = item.DesiredRating
            }).ToList();
    }
}
}
