@page "/managecategories"
@inject ICategoryService categoryService
@inject ISnackbar snackbar
@inject IDialogService dialogService

<PageTitle>Manage category</PageTitle>

<div class="p-5 m-5 rounded-lg w-25" Style="box-shadow: 0px 3px 6px 0px #20202029; min-width: 300px">
    <h3>Manage Category</h3>

   

    <EditForm Model="@Category" FormName="AddEditCategory" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <MudAutocomplete T="Category" Label="Choose a Parentcategory" MaxItems="null" @bind-Value="Category.ParentCategory" ToStringFunc="@(category => category==null?null: $"{category.Name}")" SearchFuncWithCancel="@SearchParentCategory" ResetValueOnEmptyText="true" CoerceText="true" CoerceValue="true">
            <NoItemsTemplate>
                <MudText Align="Align.Center" Class="px-4 py-1">No matching categories found</MudText>
                <MudLink Href="managecategories"><MudButton>Create new Category</MudButton></MudLink>
            </NoItemsTemplate>
        </MudAutocomplete>

        <MudAutocomplete T="string" Label="Enter category name" MaxItems="null" @bind-Value="Category.Name" SearchFuncWithCancel="@SearchCategory" ResetValueOnEmptyText="true" CoerceValue="true" CoerceText="false" Required="true" For="@(() => Category.Name)">
            <NoItemsTemplate>
                <MudText Align="Align.Center" Class="px-4 py-1">Category to be added: @Category.Name</MudText>
            </NoItemsTemplate>
        </MudAutocomplete>

        <div class="mt-5">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add</MudButton>
            <MudButton @onclick="DeleteCategory">Delete</MudButton>
            <MudButton @onclick="EditCategory">Edit</MudButton>
        </div>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <MudText Color="Color.Error">@ErrorMessage</MudText>
        }
    </EditForm>
</div>

@code
{
    private Category Category { get; set; } = new();
    private IEnumerable<Category> Categories { get; set; }
    private string ErrorMessage { get; set; }
    private MudDialogInstance editDialog;

    protected override async Task OnInitializedAsync()
    {
        Categories = await categoryService.GetAll();
    }

    private async Task HandleValidSubmit()
    {
        if (Categories.Any(category => category.Name.Equals(Category.Name, StringComparison.InvariantCultureIgnoreCase)))
        {
            ErrorMessage = "The category already exists";
            return;
        }
        ErrorMessage = string.Empty;

        await categoryService.Add(Category);
        Categories = Categories.Append(Category);
        snackbar.Add("Successfully added category", Severity.Success, config =>
        {
            snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        });

        Category = new();
    }

    private async Task DeleteCategory()
    {
        var categoryToDelete = Categories.FirstOrDefault(category => category.Name.Equals(Category.Name, StringComparison.InvariantCultureIgnoreCase));
        if (categoryToDelete == null)
        {
            ErrorMessage = "The category does not exist";
            return;
        }
        ErrorMessage = string.Empty;
        await categoryService.Delete(categoryToDelete);
        Categories = Categories.Where(c => c.Id != Category.Id);
        snackbar.Add("Successfully removed category", Severity.Info, config =>
        {
            snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        });
        Categories = await categoryService.GetAll();
        Category = new();
    }

    private async Task EditCategory()
    {
        var categoryToEdit = Categories.FirstOrDefault(category => category.Name.Equals(Category.Name, StringComparison.InvariantCultureIgnoreCase));
        if (categoryToEdit == null)
        {
            ErrorMessage = "The category does not exist";
            return;
        }

        var parameters = new DialogParameters<EditDialog<Category>>
        {
            { x => x.Model, categoryToEdit},
            { x => x.Categories, Categories}
        };

        var dialogReference = await dialogService.ShowAsync<EditDialog<Category>>("Edit Category", parameters);
        var result = await dialogReference.Result;
        if (!result.Canceled)
        {
            await categoryService.Update((Category)result.Data);
        }
    }

    private async Task<IEnumerable<string>> SearchCategory(string value, CancellationToken token)
    {
        var CategoryNames = Categories.Select(category => category.Name).ToList();
        return string.IsNullOrEmpty(value) ? CategoryNames :
        CategoryNames.Where(category => category.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<Category>> SearchParentCategory(string value, CancellationToken token)
    {
        await Task.CompletedTask;
        var result = string.IsNullOrEmpty(value) ? Categories :
        Categories.Where(category => category.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        return await Task.FromResult<IEnumerable<Category>>(result);
    }
}