@page "/manageskills"
@inject ISkillService skillService
@inject ICategoryService categoryService
@inject ISnackbar Snackbar
@inject IDialogService dialogService

<PageTitle>Manage Skill</PageTitle>

<div class="p-5 m-5 rounded-lg w-25" Style="box-shadow: 0px 3px 6px 0px #20202029; min-width: 300px">
    <h3>Manage Skill</h3>
    <EditForm Model="@Skill" FormName="AddSkill" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <MudAutocomplete T="Category" Label="Choose a category" MaxItems="null" @bind-Value="Skill.Category" ToStringFunc="@(category => category==null?null: $"{category.Name}")"
                         SearchFunc="@SearchCategory" ResetValueOnEmptyText="true" CoerceText="true" CoerceValue="true" Required="true" For="@(() => Skill.Category)">
            <NoItemsTemplate>
                <MudText Align="Align.Center" Class="px-4 py-1">No matching categories found</MudText>
                <MudLink Href="managecategories"><MudButton>Create new Category</MudButton></MudLink>
            </NoItemsTemplate>
        </MudAutocomplete>

        <MudAutocomplete T="string" Label="Enter skill name" MaxItems="null" @bind-Value="Skill.Name" SearchFunc="@SearchSkill" ResetValueOnEmptyText="true" CoerceValue="true" CoerceText="false" Required="true" For="@(() => Skill.Name)">
            <NoItemsTemplate>
                <MudText Align="Align.Center" Class="px-4 py-1">Skill to be added: @Skill.Name</MudText>
            </NoItemsTemplate>

        </MudAutocomplete>
        <div class="mt-5">
            <MudButton Disabled="@_processing" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Secondary" Class="ml-auto">Add</MudButton>
            <MudButton Disabled="@_processing" @onclick="DeleteSkill">Delete</MudButton>
            <MudButton Disabled="@_processing" @onclick="EditSkill">Edit</MudButton>
        </div>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <MudText Color="Color.Error">@ErrorMessage</MudText>
        }
    </EditForm>
</div>

@code
{
    private Skill Skill { get; set; } = new();
    private IEnumerable<Skill> Skills { get; set; }
    private IEnumerable<Category> Categories { get; set; }
    private string ErrorMessage { get; set; }
    private bool _processing = false;

    protected override async Task OnInitializedAsync()
    {
        Skills = await skillService.GetAll();
        Categories = await categoryService.GetAll();
    }

    private async Task HandleValidSubmit()
    {
        _processing = true;
        if (Skills.Any(skill => skill.Name.Equals(Skill.Name, StringComparison.InvariantCultureIgnoreCase)))
        {
            ErrorMessage = "The skill already exists";
            _processing = false;
            return;
        }
        ErrorMessage = string.Empty;
        await skillService.Add(Skill);
        Skills = Skills.Append(Skill);
        Snackbar.Add("Successfully added skill", Severity.Success, config =>
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        });

        Skill = new();
        _processing = false;
    }

    private async Task DeleteSkill()
    {
        _processing = true;
        var skillToDelete = Skills.FirstOrDefault(skill => skill.Name.Equals(Skill.Name, StringComparison.InvariantCultureIgnoreCase));
        if (skillToDelete == null)
        {
            ErrorMessage = "The skill does not exist";
            _processing = false;
            return;
        }
        ErrorMessage = string.Empty;
        await skillService.Delete(skillToDelete);
        Skills = Skills.Where(s => s.Id != Skill.Id);
        Snackbar.Add("Successfully removed skill", Severity.Info, config =>
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        });

        Skill = new();
        _processing = false;
    }

    private async Task EditSkill()
    {
        _processing = true;
        var skillToEdit = Skills.FirstOrDefault(skill => skill.Name.Equals(Skill.Name, StringComparison.InvariantCultureIgnoreCase));
        if (skillToEdit == null)
        {
            ErrorMessage = "The skill does not exist";
            _processing = false;
            return;
        }

        var parameters = new DialogParameters<EditDialog<Skill>>
        {
            { x => x.Model, skillToEdit},
            { x => x.Categories, Categories}
        };

        var dialogReference = await dialogService.ShowAsync<EditDialog<Skill>>("Edit Skill", parameters);
        var result = await dialogReference.Result;
        if (!result.Canceled)
        {
            await skillService.Update((Skill)result.Data);
        }
        _processing = false;
    }

    private async Task<IEnumerable<string>> SearchSkill(string value, CancellationToken token)
    {

        var filteredSkills = Skill.Category != null ? Skills.Where(skill => skill.CategoryId == Skill.Category.Id).ToList() :
        Skills.ToList();

        var skillNames = filteredSkills.Select(skill => skill.Name).ToList();

        var result = string.IsNullOrEmpty(value) ? skillNames :
        skillNames.Where(skillName => skillName.Contains(value, StringComparison.InvariantCultureIgnoreCase)).ToList();
        return await Task.FromResult<IEnumerable<string>>(result);
    }

    private async Task<IEnumerable<Category>> SearchCategory(string value, CancellationToken token)
    {
        await Task.CompletedTask;
        var result = string.IsNullOrEmpty(value) ? Categories :
        Categories.Where(category => category.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        return await Task.FromResult<IEnumerable<Category>>(result);
    }
}
