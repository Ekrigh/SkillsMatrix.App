@page "/manageskills"
@rendermode InteractiveServer
@using SkillsMatrix.Infrastructure.Models
@using SkillsMatrix.Infrastructure.Services.SkillService
@using SkillsMatrix.Infrastructure.Services.CategoryService
@inject ISkillService skillService;
@inject ICategoryService categoryService;

<PageTitle>Manage Skill</PageTitle>

<h3>Manage Skill</h3>


    <div class="col-md-4">
        <EditForm Model="@Skill" FormName="AddSkill" OnValidSubmit="HandleValidSubmit">
            <MudAutocomplete T="Category" Label="Choose a category" MaxItems="null" @bind-Value="SelectedCategory" ToStringFunc="@(category => category==null?null: $"{category.Name}")" SearchFuncWithCancel="@SearchCategory" ResetValueOnEmptyText="true">
                <NoItemsTemplate>
                    <MudText Align="Align.Center" Class="px-4 py-1">No matching categories found</MudText>
                    <AfterItemsTemplate>
                        <div class="pa-2">
                            <MudButton>Create new Category</MudButton>
                        </div>
                    </AfterItemsTemplate>
                </NoItemsTemplate>
            </MudAutocomplete>
            <MudAutocomplete T="string" Label="Enter skill name" MaxItems="null" @bind-Value="Skill.Name" @bind-Text="Skill.Name" SearchFuncWithCancel="@SearchSkill" CoerceText="false">
                <NoItemsTemplate>
                    <MudText Align="Align.Center" Class="px-4 py-1">No matching skills found</MudText>
                    <AfterItemsTemplate>
                        <div class="pa-2">
                            <MudButton>Create new Skill</MudButton>
                        </div>
                    </AfterItemsTemplate>
                </NoItemsTemplate>
            </MudAutocomplete>
            
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add</MudButton>
            <MudButton @onclick="DeleteSkill">Delete</MudButton>
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <MudText Color="Color.Error">@ErrorMessage</MudText>
            }
        </EditForm>
    </div>


@code 
{
    private Skill Skill { get; set; } = new();
    private Category SelectedCategory { get; set; }
    private IEnumerable<Skill> Skills { get; set; }
    private IEnumerable<Category> Categories { get; set; }
    private string ErrorMessage { get; set; }

    private async Task HandleValidSubmit()
    {
        if (Skills.Any(skill => skill.Name.Equals(Skill.Name, StringComparison.InvariantCultureIgnoreCase))) {
            ErrorMessage = "The skill already exists";
            return;
        }
        ErrorMessage = string.Empty;
        Skill.Category = SelectedCategory;
        await skillService.Add(Skill);
        Skills = await skillService.GetAll();
    }

    private async Task DeleteSkill() 
    {
        var skillToDelete = Skills.FirstOrDefault(skill => skill.Name.Equals(Skill.Name, StringComparison.InvariantCultureIgnoreCase));
        if (skillToDelete == null)
        {
            ErrorMessage = "The skill does not exist";
            return;
        }
        ErrorMessage = string.Empty;
        await skillService.Delete(skillToDelete);
        Skills = await skillService.GetAll();
    }

    protected override async Task OnInitializedAsync()
    {
        Skills = await skillService.GetAll();
        Categories = await categoryService.GetAll();
    }

    private async Task<IEnumerable<string>> SearchSkill(string value, CancellationToken token)
    {
        var filteredSkills = SelectedCategory != null ? Skills.Where(skill => skill.CategoryId == SelectedCategory.Id).ToList() : 
        Skills.ToList();

        var skillNames = filteredSkills.Select(skill => skill.Name).ToList();

        return string.IsNullOrEmpty(value) ? skillNames :
        skillNames.Where(skill => skill.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<Category>> SearchCategory(string value, CancellationToken token)
    {
        await Task.CompletedTask;
        return string.IsNullOrEmpty(value) ? Categories :
        Categories.Where(category => category.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

}
